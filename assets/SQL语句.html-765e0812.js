import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as c,c as i,b as n,d as e,a as t,e as s}from"./app-896701df.js";const p="/assets/1710809015482-55bb02ef.png",d="/assets/1712887889929-b6ed2ba0.png",u="/assets/1712887796926-8adcb656.png",r="/assets/1709692602861-ca79ff92.png",k="/assets/1711759594771-e45b89b9.png",v="/assets/1709692944725-983d25c4.png",m="/assets/1709693407623-996fbac1.png",b="/assets/1709693578941-315bb305.png",y="/assets/1709694245621-f2b52f73.png",g="/assets/1709694582935-a75a18e1.png",w="/assets/1709694683786-17173a1f.png",h="/assets/1709695084231-d80ae40a.png",f="/assets/1711071518070-fa3e10ef.png",q={},_=s(`<h1 id="sql语句" tabindex="-1"><a class="header-anchor" href="#sql语句" aria-hidden="true">#</a> SQL语句</h1><h2 id="第01章-聚合函数" tabindex="-1"><a class="header-anchor" href="#第01章-聚合函数" aria-hidden="true">#</a> 第01章 聚合函数</h2><p>聚合函数作用于一组数据，并对一组数据返回一个值。</p><h3 id="count" tabindex="-1"><a class="header-anchor" href="#count" aria-hidden="true">#</a> count</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法</span>
<span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">column</span><span class="token punctuation">)</span>
<span class="token keyword">column</span>:字段名

<span class="token comment">-- 功能</span>
计算指定字段在查询结构中出现的个数<span class="token punctuation">(</span>不包含<span class="token boolean">NULL</span>值<span class="token punctuation">)</span>用于统计非<span class="token boolean">null</span>值的数量

<span class="token comment">-- 案例</span>
<span class="token comment">// 计算order_date(不包含null值)这列的数量</span>
<span class="token function">count</span><span class="token punctuation">(</span>order_date<span class="token punctuation">)</span>

<span class="token comment">// 计算order_date中是2019年的数量</span>
<span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">year</span><span class="token punctuation">(</span>order_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2019</span> <span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sum" tabindex="-1"><a class="header-anchor" href="#sum" aria-hidden="true">#</a> sum</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">column</span><span class="token punctuation">)</span>
<span class="token keyword">column</span>:字段名

<span class="token comment">-- 功能</span>
求和通常适用于数值类型的字段或变量。不包含<span class="token boolean">NULL</span>值
也可用于统计非数值类型的数量，因为sum函数可以对布尔值求和，将<span class="token boolean">true</span>视为<span class="token number">1</span>，<span class="token boolean">false</span>视为<span class="token number">0</span>

<span class="token comment">-- 案例</span>
<span class="token comment">// 计算order_num(不包含null值)这列的求和数</span>
<span class="token function">sum</span><span class="token punctuation">(</span>order_num<span class="token punctuation">)</span>

<span class="token comment">// 计算order_date这列中是2019年的数量</span>
<span class="token function">sum</span><span class="token punctuation">(</span>order_date <span class="token operator">like</span> <span class="token string">&#39;2019-%&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="avg" tabindex="-1"><a class="header-anchor" href="#avg" aria-hidden="true">#</a> avg</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法</span>
<span class="token function">avg</span><span class="token punctuation">(</span><span class="token keyword">column</span><span class="token punctuation">)</span>
<span class="token keyword">column</span>:字段名

<span class="token comment">-- 功能</span>
求取平均值，只适用于数值类型的字段或变量。不包含<span class="token boolean">NULL</span>值

<span class="token comment">-- 案例</span>
<span class="token comment">// 计算order_num(不包含null值)这列的平均值</span>
<span class="token function">avg</span><span class="token punctuation">(</span>order_num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="max" tabindex="-1"><a class="header-anchor" href="#max" aria-hidden="true">#</a> max</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法</span>
<span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">column</span><span class="token punctuation">)</span>
<span class="token keyword">column</span>:字段名

<span class="token comment">-- 功能</span>
求某一列的最大值，适用于数值类型、字符串类型、日期时间类型的字段（或变量）不包含<span class="token boolean">NULL</span>值

<span class="token comment">-- 案例</span>
<span class="token comment">// 计算order_num(不包含null值)这列的最大值</span>
<span class="token function">max</span><span class="token punctuation">(</span>order_num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="min" tabindex="-1"><a class="header-anchor" href="#min" aria-hidden="true">#</a> min</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法</span>
<span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">column</span><span class="token punctuation">)</span>
<span class="token keyword">column</span>:字段名

<span class="token comment">-- 功能</span>
求某一列的最小值，适用于数值类型、字符串类型、日期时间类型的字段<span class="token punctuation">(</span>或变量<span class="token punctuation">)</span>不包含<span class="token boolean">NULL</span>值

<span class="token comment">-- 案例</span>
<span class="token comment">// 计算order_num(不包含null值)这列的最小值</span>
<span class="token function">min</span><span class="token punctuation">(</span>order_num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第02章-函数" tabindex="-1"><a class="header-anchor" href="#第02章-函数" aria-hidden="true">#</a> 第02章 函数</h2><h3 id="if" tabindex="-1"><a class="header-anchor" href="#if" aria-hidden="true">#</a> if</h3><p>可以增加新的列</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token punctuation">,</span> 条件成立<span class="token punctuation">,</span> 条件不成立<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>例题</p><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 
   <span class="token operator">*</span><span class="token punctuation">,</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">&gt;</span>z <span class="token operator">and</span> x<span class="token operator">+</span>z<span class="token operator">&gt;</span>y <span class="token operator">and</span> y<span class="token operator">+</span>z<span class="token operator">&gt;</span>x<span class="token punctuation">,</span><span class="token string">&#39;Yes&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;No&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> triangle
<span class="token keyword">from</span> 
	triangle
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cast" tabindex="-1"><a class="header-anchor" href="#cast" aria-hidden="true">#</a> cast</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法</span>
cast<span class="token punctuation">(</span>expression <span class="token keyword">as</span> <span class="token keyword">type</span><span class="token punctuation">)</span>
expression: 目标类型
<span class="token keyword">type</span>：指定类型
<span class="token keyword">type</span>可以是 <span class="token keyword">binary</span> <span class="token keyword">char</span> <span class="token keyword">date</span> <span class="token keyword">datetime</span> <span class="token keyword">time</span> <span class="token keyword">decimal</span> signed <span class="token keyword">unsigned</span>

<span class="token comment">-- 功能</span>
将任何类型的值转换为指定类型的值

<span class="token comment">-- 案例</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> CAST<span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span> <span class="token keyword">AS</span> <span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------------------------------+</span>
<span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> CAST<span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span> <span class="token keyword">AS</span> <span class="token keyword">UNSIGNED</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------------------------+</span>
<span class="token operator">|</span> <span class="token number">1</span>                             <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------------------------+</span>
此案例中的cast就是将字符‘<span class="token number">1</span>’作为了无符号整数<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ifnull" tabindex="-1"><a class="header-anchor" href="#ifnull" aria-hidden="true">#</a> ifnull</h3><p>可以增加新的列。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>ifnull<span class="token punctuation">(</span>条件<span class="token punctuation">,</span> 条件是空<span class="token punctuation">)</span>

<span class="token comment">-- 例子</span>
<span class="token comment">// 如果round(sum(a.price*b.units)/sum(b.units), 2)为null则把这列的值变为0</span>
ifnull<span class="token punctuation">(</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>price<span class="token operator">*</span>b<span class="token punctuation">.</span>units<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">sum</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>units<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">as</span> average_price
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="case-then" tabindex="-1"><a class="header-anchor" href="#case-then" aria-hidden="true">#</a> case then</h3><p>可以增加新的列。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">--  语法</span>
<span class="token keyword">case</span>
	<span class="token keyword">when</span> 条件 <span class="token keyword">then</span> 结果<span class="token number">1</span>
	<span class="token keyword">else</span> 结果<span class="token number">2</span>
<span class="token keyword">end</span> <span class="token keyword">as</span> 别名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例题</p><figure><img src="`+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 解法一</span>\n<span class="token keyword">select</span> \n    x<span class="token punctuation">,</span>\n    y<span class="token punctuation">,</span>\n    z<span class="token punctuation">,</span>\n    <span class="token keyword">case</span> \n        <span class="token keyword">when</span> x<span class="token operator">+</span>y<span class="token operator">&gt;</span>z <span class="token operator">and</span> x<span class="token operator">+</span>z<span class="token operator">&gt;</span>y <span class="token operator">and</span> y<span class="token operator">+</span>z<span class="token operator">&gt;</span>x <span class="token keyword">then</span> <span class="token string">&#39;Yes&#39;</span>\n        <span class="token keyword">else</span> <span class="token string">&#39;No&#39;</span>\n    <span class="token keyword">end</span> <span class="token keyword">as</span> <span class="token string">&#39;triangle&#39;</span>\n<span class="token keyword">from</span> \n	triangle<span class="token punctuation">;</span>\n\n<span class="token comment">-- 解法二</span>\n<span class="token keyword">select</span>\n   <span class="token operator">*</span><span class="token punctuation">,</span>\n   <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">&gt;</span>z <span class="token operator">and</span> x<span class="token operator">+</span>z<span class="token operator">&gt;</span>y <span class="token operator">and</span> y<span class="token operator">+</span>z<span class="token operator">&gt;</span>x<span class="token punctuation">,</span> <span class="token string">&#39;Yes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;No&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> triangle\n<span class="token keyword">from</span>\n	triangle\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="coalesce" tabindex="-1"><a class="header-anchor" href="#coalesce" aria-hidden="true">#</a> coalesce</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法</span>\n<span class="token keyword">coalesce</span><span class="token punctuation">(</span><span class="token keyword">column</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">column</span>: 表中的一列\n\n<span class="token comment">-- 功能</span>\n当<span class="token keyword">column</span>为<span class="token boolean">null</span>值的时候，将返回<span class="token number">1</span>，否则将返回<span class="token keyword">column</span>的真实值\n\n<span class="token comment">-- 案例</span>\n<span class="token keyword">select</span>\n	<span class="token keyword">coalesce</span><span class="token punctuation">(</span><span class="token keyword">column</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">from</span>\n	tableA\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法</span>\n<span class="token keyword">coalesce</span><span class="token punctuation">(</span><span class="token keyword">column</span><span class="token punctuation">,</span> column1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">column</span>: 表中的一列\ncolumn1: 表中的一列\n\n<span class="token comment">-- 功能</span>\n当<span class="token keyword">column</span>不为<span class="token boolean">null</span>，那么无论column1是否为<span class="token boolean">null</span>，都将返回<span class="token keyword">column</span>的真实值\n当<span class="token keyword">column</span>为<span class="token boolean">null</span>，而column1不为<span class="token boolean">null</span>的时候，返回column1的真实值\n只有当<span class="token keyword">column</span>和column1均为<span class="token boolean">null</span>的时候，将返回<span class="token number">1</span>\n\n<span class="token comment">-- 案例</span>\n<span class="token keyword">select</span>\n	<span class="token keyword">coalesce</span><span class="token punctuation">(</span><span class="token keyword">column</span><span class="token punctuation">,</span> column1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">from</span>\n	tableA\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="窗口函数" tabindex="-1"><a class="header-anchor" href="#窗口函数" aria-hidden="true">#</a> 窗口函数</h3><div class="hint-container warning"><p class="hint-container-title">注意</p><p><b style="color:#8f71e0;">窗口函数是MySQL 8 的新特性，MySQL 8 以下版本用不了！</b></p></div><p><b style="color:#3e547d;"><strong>简介</strong></b></p><p>聚合函数是对一组数据计算后返回单个值(即分组)。而窗口函数在行记录上计算某个字段的结果时，可将窗口范围内的数据输入到聚合函数中，并不改变行数。</p><p><b style="color:#3e547d;"><strong>语法</strong></b></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法一</span>\n<span class="token operator">&lt;</span>窗口函数<span class="token operator">&gt;</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> <span class="token operator">&lt;</span>用于分组的列名<span class="token operator">&gt;</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token operator">&lt;</span>用于排序的列名<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">-- over关键字用于指定函数的窗口范围</span>\n<span class="token comment">-- partition by 用于对表分组</span>\n<span class="token comment">-- order by子句用于对分组后的结果进行排序 可以省略</span>\n\n<span class="token comment">-- 语法二</span>\n<span class="token operator">&lt;</span>窗口函数<span class="token operator">&gt;</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token operator">&lt;</span>用于排序的列名<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">-- over关键字用于指定函数的窗口范围</span>\n<span class="token comment">-- order by子句用于对分组后的结果进行排序 可以省略</span>\n\n<span class="token comment">-- 语法三</span>\n<span class="token operator">&lt;</span>窗口函数<span class="token operator">&gt;</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token operator">&lt;</span>用于排序的列名<span class="token operator">&gt;</span> <span class="token keyword">rows</span> <span class="token number">6</span> <span class="token keyword">preceding</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">-- over关键字用于指定函数的窗口范围</span>\n<span class="token comment">-- order by子句用于对分组后的结果进行排序 可以省略</span>\n<span class="token comment">-- rows 6 preceding表示作用于当前行加上前六行 如果是窗口函数是sum表示意思就是从当前行开始固定求取前6行的值包括当前行也就是7行</span>\n\n常用窗口函数 rank<span class="token punctuation">(</span><span class="token punctuation">)</span> dense_rank<span class="token punctuation">(</span><span class="token punctuation">)</span> row_number<span class="token punctuation">(</span><span class="token punctuation">)</span>\n常用聚合函数 <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">avg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b style="color:#3e547d;"><strong>准备表和数据</strong></b></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> employee\n<span class="token punctuation">(</span>\n    <span class="token identifier"><span class="token punctuation">`</span>eid<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">&#39;员工id&#39;</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>ename<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;员工名称&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>dname<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;部门名称&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>hiredate<span class="token punctuation">`</span></span> <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;入职日期&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span> <span class="token keyword">double</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;薪资&#39;</span>\n<span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;员工表&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>ename<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>dname<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>hiredate<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;傅嘉熙&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;开发部&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-08-20 12:00:04&#39;</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>ename<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>dname<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>hiredate<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;武晟睿&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;开发部&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-06-12 13:54:12&#39;</span><span class="token punctuation">,</span> <span class="token number">9500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>ename<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>dname<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>hiredate<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;孙弘文&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;开发部&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-10-16 08:27:06&#39;</span><span class="token punctuation">,</span> <span class="token number">9400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>ename<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>dname<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>hiredate<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;潘乐驹&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;开发部&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-04-22 03:56:11&#39;</span><span class="token punctuation">,</span> <span class="token number">9500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>ename<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>dname<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>hiredate<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;潘昊焱&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;人事部&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-02-24 03:40:02&#39;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>ename<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>dname<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>hiredate<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;沈涛&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;人事部&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-12-14 09:16:37&#39;</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>ename<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>dname<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>hiredate<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;江峻熙&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;人事部&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-05-12 01:17:48&#39;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>ename<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>dname<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>hiredate<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;陆远航&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;人事部&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-04-14 03:35:57&#39;</span><span class="token punctuation">,</span> <span class="token number">5500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>ename<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>dname<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>hiredate<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;姜煜祺&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;销售部&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-03-23 03:21:05&#39;</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>ename<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>dname<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>hiredate<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;邹明&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;销售部&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-11-23 23:10:06&#39;</span><span class="token punctuation">,</span> <span class="token number">6800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>ename<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>dname<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>hiredate<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;董擎苍&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;销售部&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-02-12 07:54:32&#39;</span><span class="token punctuation">,</span> <span class="token number">6500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>ename<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>dname<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>hiredate<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;钟俊驰&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;销售部&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-04-10 12:17:06&#39;</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分别使用聚合函数sum()和窗口函数sum()来根据部门求和看下两者区别。</p><p><b style="color:#3e547d;"><strong>聚合函数</strong></b></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span>\n    dname<span class="token punctuation">,</span>\n    <span class="token function">sum</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> sum\n<span class="token keyword">from</span>\n    employee\n<span class="token keyword">group</span> <span class="token keyword">by</span>\n    dname\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b style="color:#6E8B74;"><strong>结果</strong></b></p><p>左边为查询结果，右边为原表。</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><b style="color:#3e547d;"><strong>窗口函数</strong></b></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
    dname<span class="token punctuation">,</span>
    salary<span class="token punctuation">,</span>
    <span class="token function">sum</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> dname <span class="token keyword">order</span> <span class="token keyword">by</span> salary<span class="token punctuation">)</span> sum
<span class="token keyword">from</span>
    employee
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b style="color:#6E8B74;"><strong>结果</strong></b></p><p>左边为查询结果，右边为原表。</p><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><b style="color:#3e547d;"><strong>结论</strong></b></p><p>聚合函数是将一组数据计算后返回单个值，而窗口函数在行记录上计算某个字段的结果时，<strong>可将窗口范围内的数据输入到聚合函数中</strong>，并不改变行数，就好比如我们刚刚根据部门开窗求和salary薪资，每一行的sum数据是将前面范围内的数据都聚合到当前结果中。</p><h3 id="字符串系列" tabindex="-1"><a class="header-anchor" href="#字符串系列" aria-hidden="true">#</a> 字符串系列</h3><p><b style="color:#3e547d;"><strong>concat</strong></b></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法</span>
concat<span class="token punctuation">(</span>Str1<span class="token punctuation">,</span>Str2<span class="token punctuation">)</span>
Str1: 字符串<span class="token number">1</span>
Str2: 字符串<span class="token number">2</span>

<span class="token comment">-- 功能</span>
将两个字符串拼接起来

<span class="token comment">-- 案例</span>
<span class="token comment">// 结果为“123456”</span>
concat<span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;456&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b style="color:#3e547d;"><strong>substring</strong></b></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法1</span>
substring<span class="token punctuation">(</span>Str<span class="token punctuation">,</span>Int1<span class="token punctuation">,</span>Int2<span class="token punctuation">)</span>
Str: 字符串
Int1: 截取的开始位置
Int2: 截取的结束位置
注意：下标开始为<span class="token number">1</span>不是<span class="token number">0</span>

<span class="token comment">-- 功能</span>
指定截取字符串的开始位置到结束位置

<span class="token comment">-- 案例1</span>
<span class="token comment">// 结果为“1”</span>
substring<span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法2</span>
substring<span class="token punctuation">(</span>Str<span class="token punctuation">,</span>Int1<span class="token punctuation">)</span>
Str: 字符串
Int1: 截取的开始位置
注意：下标开始为<span class="token number">1</span>不是<span class="token number">0</span>

<span class="token comment">-- 功能</span>
指定截取字符串的开始位置一直到结束

<span class="token comment">-- 案例2</span>
<span class="token comment">// 结果为“23”</span>
substring<span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b style="color:#3e547d;"><strong>upper</strong></b></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">--语法</span>
upper<span class="token punctuation">(</span>Str<span class="token punctuation">)</span>
Str：字符串

<span class="token comment">-- 功能</span>
将字符串全部转化为大写

<span class="token comment">-- 案例</span>
<span class="token comment">// 结果为“ABC”</span>
upper<span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b style="color:#3e547d;"><strong>lower</strong></b></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">--语法</span>
lower<span class="token punctuation">(</span>Str<span class="token punctuation">)</span>
Str：字符串

<span class="token comment">-- 功能</span>
将字符串转化为小写

<span class="token comment">-- 案例</span>
<span class="token comment">// 结果为“abc”</span>
lower<span class="token punctuation">(</span><span class="token string">&quot;ABC&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b style="color:#3e547d;"><strong>char_length</strong></b></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法</span>
char_length<span class="token punctuation">(</span>Str<span class="token punctuation">)</span>
Str：字符串

<span class="token comment">-- 功能</span>
计算字符串的长度不管是数字还是字母都算是一个字符

<span class="token comment">-- 案例</span>
<span class="token comment">// 返回 11</span>
char_length<span class="token punctuation">(</span><span class="token string">&quot;我是TenSoFlow&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b style="color:#3e547d;"><strong>length</strong></b></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法</span>
length<span class="token punctuation">(</span>Str<span class="token punctuation">)</span>
Str：字符串

<span class="token comment">-- 功能</span>
计算字符串的长度它的计算单位是字节
utf8编码：一个汉字三个字节，一个数字或字母一个字节。
gbk编码：一个汉字两个字节，一个数字或字母一个字节。

<span class="token comment">-- 案例</span>
<span class="token comment">// 如果是utf8编码则返回 15</span>
length<span class="token punctuation">(</span><span class="token string">&quot;我是TenSoFlow&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="group-concat" tabindex="-1"><a class="header-anchor" href="#group-concat" aria-hidden="true">#</a> group_concat</h3><p>将group by产生的同一个分组中的值连接起来，返回一个字符串结果。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法</span>
group_concat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">distinct</span><span class="token punctuation">]</span> 字段名 <span class="token punctuation">[</span><span class="token keyword">order</span> <span class="token keyword">by</span> 排序字段 <span class="token keyword">asc</span><span class="token operator">/</span><span class="token keyword">desc</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>separator <span class="token string">&#39;分隔符&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
三个<span class="token punctuation">[</span><span class="token punctuation">]</span>根据需求增加
<span class="token comment">// 最简便的写法 默认以&#39;,&#39;分隔</span>
group_concat<span class="token punctuation">(</span>字段名<span class="token punctuation">)</span>
<span class="token comment">// 对字段进行去重分隔</span>
group_concat<span class="token punctuation">(</span>distince 字段名<span class="token punctuation">)</span>
<span class="token comment">// 对字段进行去重分隔并排序拼接</span>
group_concat<span class="token punctuation">(</span>distince 字段名 <span class="token keyword">order</span> <span class="token keyword">by</span> 排序字段<span class="token punctuation">)</span>
<span class="token comment">// 对字段进行去重并以&#39;@&#39;分隔且排序拼接</span>
group_concat<span class="token punctuation">(</span>distince 字段名 <span class="token keyword">order</span> <span class="token keyword">by</span> 排序字段 separator <span class="token string">&#39;@&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第03章-日期" tabindex="-1"><a class="header-anchor" href="#第03章-日期" aria-hidden="true">#</a> 第03章 日期</h2><h3 id="year" tabindex="-1"><a class="header-anchor" href="#year" aria-hidden="true">#</a> year</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法</span>
<span class="token keyword">year</span><span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span>
<span class="token keyword">date</span>: 日期、时间、或者日期时间类型的值

<span class="token comment">-- 功能</span>
提取日期中的年份

<span class="token comment">-- 案例</span>
<span class="token comment">// 返回2020</span>
<span class="token keyword">year</span><span class="token punctuation">(</span>‘<span class="token number">2020</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">04</span>’<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="month" tabindex="-1"><a class="header-anchor" href="#month" aria-hidden="true">#</a> month</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法</span>
<span class="token keyword">month</span><span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span>
<span class="token keyword">date</span>: 日期、时间、或者日期时间类型的值

<span class="token comment">-- 功能</span>
提取日期中的月份

<span class="token comment">-- 案例</span>
<span class="token comment">// 返回3</span>
<span class="token keyword">month</span><span class="token punctuation">(</span>‘<span class="token number">2020</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">04</span>’<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="day" tabindex="-1"><a class="header-anchor" href="#day" aria-hidden="true">#</a> day</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法</span>
<span class="token keyword">day</span><span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span>
<span class="token keyword">date</span>: 日期、时间、或者日期时间类型的值

<span class="token comment">-- 功能</span>
提取日期中月份的第几天

<span class="token comment">-- 案例</span>
<span class="token comment">// 返回4</span>
<span class="token keyword">day</span><span class="token punctuation">(</span>‘<span class="token number">2020</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">04</span>’<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="limit" tabindex="-1"><a class="header-anchor" href="#limit" aria-hidden="true">#</a> limit</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法1</span>
<span class="token keyword">limit</span> row_count
row_count:要返回的行数。

<span class="token comment">-- 功能</span>
指定只查询前row_count条记录

<span class="token comment">-- 案例</span>
<span class="token comment">// 将返回查询结果的前10行。</span>
<span class="token keyword">limit</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法2</span>
<span class="token keyword">limit</span> <span class="token keyword">offset</span><span class="token punctuation">,</span>row_count
<span class="token keyword">offset</span>: 跳过的行数
row_count：查询的行数

<span class="token comment">-- 功能</span>
先跳过<span class="token keyword">offset</span>行，然后再查询row_count行

<span class="token comment">-- 案例</span>
<span class="token comment">// 先跳过5行再查询10条数据</span>
<span class="token keyword">limit</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法3</span>
<span class="token keyword">limit</span> cont <span class="token keyword">offset</span> row_count
row_count: 跳过的行数
cont：查询的行数

<span class="token comment">-- 功能</span>
先跳过row_count行，然后再查询cont行

<span class="token comment">-- 案例</span>
<span class="token comment">// 先跳过10行再查询5条数据</span>
<span class="token keyword">limit</span> <span class="token number">5</span> <span class="token keyword">offset</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数一-datediff" tabindex="-1"><a class="header-anchor" href="#函数一-datediff" aria-hidden="true">#</a> 函数一 datediff</h3>`,88),x={href:"https://leetcode.cn/problems/rising-temperature/solutions/50468/tu-jie-sqlmian-shi-ti-ru-he-bi-jiao-ri-qi-shu-ju-b/",target:"_blank",rel:"noopener noreferrer"},A=s(`<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法</span>
datediff<span class="token punctuation">(</span>日期<span class="token number">1</span><span class="token punctuation">,</span> 日期<span class="token number">2</span><span class="token punctuation">)</span>：
日期<span class="token number">1</span>:合法的日期表达式 如 <span class="token string">&#39;2024-03-04&#39;</span>
日期<span class="token number">2</span>:合法的日期表达式 如 <span class="token string">&#39;2024-03-03&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>得到的结果是日期1与日期2相差的天数。</p><p>如果日期1比日期2大，结果为正；如果日期1比日期2小，结果为负。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 例子</span>
datediff<span class="token punctuation">(</span><span class="token string">&#39;2024-03-04&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2024-03-03&#39;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数二-timestampdiff" tabindex="-1"><a class="header-anchor" href="#函数二-timestampdiff" aria-hidden="true">#</a> 函数二 timestampdiff</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法</span>
timestampdiff<span class="token punctuation">(</span>时间类型<span class="token punctuation">,</span> 日期<span class="token number">1</span><span class="token punctuation">,</span> 日期<span class="token number">2</span><span class="token punctuation">)</span>
时间类型参数:可以是 <span class="token keyword">day</span> <span class="token keyword">hour</span> <span class="token keyword">second</span>
日期<span class="token number">1</span>:合法的日期表达式 如 <span class="token string">&#39;2024-03-04&#39;</span>
日期<span class="token number">2</span>:合法的日期表达式 如 <span class="token string">&#39;2024-03-03&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>日期1大于日期2，结果为负，日期1小于日期2，结果为正。</p><p>在&quot;时间类型&quot;的参数位置，通过添加&quot;day&quot;, &quot;hour&quot;, &quot;second&quot;等关键词。来规定计算天数差、小时数差、还是分钟数差。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 例子</span>
timestampdiff<span class="token punctuation">(</span><span class="token keyword">day</span><span class="token punctuation">,</span> <span class="token string">&#39;2024-03-04&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2024-03-03&#39;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数三-date-sub" tabindex="-1"><a class="header-anchor" href="#函数三-date-sub" aria-hidden="true">#</a> 函数三 date_sub</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法</span>
date_sub<span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">,</span> <span class="token keyword">interval</span> expr <span class="token keyword">type</span><span class="token punctuation">)</span>
<span class="token keyword">interval</span>是“间隙”的意思不是参数是固定语法
<span class="token keyword">date</span>参数：合法的日期表达式 如 <span class="token string">&#39;2024-03-04&#39;</span>
expr参数：希望添加的时间间隔
<span class="token keyword">type</span>参数：可以是如下值
    MICROSECOND
    <span class="token keyword">SECOND</span>
    <span class="token keyword">MINUTE</span>
    <span class="token keyword">HOUR</span>
    <span class="token keyword">DAY</span>
    WEEK
    <span class="token keyword">MONTH</span>
    QUARTER
    <span class="token keyword">YEAR</span>
    SECOND_MICROSECOND
    MINUTE_MICROSECOND
    MINUTE_SECOND
    HOUR_MICROSECOND
    HOUR_SECOND
    HOUR_MINUTE
    DAY_MICROSECOND
    DAY_SECOND
    DAY_MINUTE
    DAY_HOUR
    YEAR_MONTH
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数功能让指定的日期减去指定的天数或者年数等等</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 例子: 让&#39;2024-03-04&#39;减去两天 </span>
date_sub<span class="token punctuation">(</span><span class="token string">&#39;2024-03-04&#39;</span><span class="token punctuation">,</span><span class="token keyword">interval</span> <span class="token number">2</span> <span class="token keyword">DAY</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&#39;2024-03-02&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数四-min" tabindex="-1"><a class="header-anchor" href="#函数四-min" aria-hidden="true">#</a> 函数四 MIN</h3><p>属于MySql的聚合函数，可以对日期使用，找到最小日期。</p><h2 id="第04章-临时表" tabindex="-1"><a class="header-anchor" href="#第04章-临时表" aria-hidden="true">#</a> 第04章 临时表</h2><h3 id="with-as" tabindex="-1"><a class="header-anchor" href="#with-as" aria-hidden="true">#</a> with as</h3><p><b style="color:#3e547d;"><strong>简介</strong></b></p><p>WITH 子句，也称为 Common Table Expressions（CTE），是一种在 SQL查询中<strong>创建临时结果集</strong>的方法，存在于单个语句的范围内，以便在查询中多次引用。它可以使 SQL 查询更加模块化和可读。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 使用with语句会创建一个cte_name临时表</span>
<span class="token keyword">with</span> cte_name <span class="token punctuation">(</span>column_name1<span class="token punctuation">,</span> column_name2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token punctuation">(</span>
    <span class="token keyword">select</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">from</span> table_name
    <span class="token keyword">where</span> condition
<span class="token punctuation">)</span> 

<span class="token comment">-- 使用cte_name临时表查询</span>
<span class="token keyword">select</span> 
	column_name1<span class="token punctuation">,</span>
    column_name2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">from</span> 
	cte_name
<span class="token keyword">where</span> 
	condition<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第05章-两表连接" tabindex="-1"><a class="header-anchor" href="#第05章-两表连接" aria-hidden="true">#</a> 第05章 两表连接</h2><h3 id="准备两表" tabindex="-1"><a class="header-anchor" href="#准备两表" aria-hidden="true">#</a> 准备两表</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> table_a 
<span class="token punctuation">(</span>
    id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">,</span>
    <span class="token keyword">value</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token keyword">comment</span> <span class="token string">&#39;表A&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">create</span> <span class="token keyword">table</span> table_b
<span class="token punctuation">(</span>
    id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">,</span>
    <span class="token keyword">value</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token keyword">comment</span> <span class="token string">&#39;表B&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> table_a <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;福克斯&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> table_a <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;警察&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> table_a <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&quot;的士&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> table_a <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&quot;林肯&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> table_a <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&quot;亚利桑那州&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> table_a <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&quot;华盛顿&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> table_a <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">&quot;戴尔&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> table_a <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&quot;朗讯&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> table_b <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;福克斯&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> table_b <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;警察&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> table_b <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&quot;的士&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> table_b <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&quot;华盛顿&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> table_b <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">&quot;戴尔&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> table_b <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">&quot;微软&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> table_b <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">&quot;苹果&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> table_b <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">&quot;苏格兰&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="表中数据" tabindex="-1"><a class="header-anchor" href="#表中数据" aria-hidden="true">#</a> 表中数据</h3><p>左边是A表数据，右边是B表数据。</p><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="笛卡尔积-cross-join" tabindex="-1"><a class="header-anchor" href="#笛卡尔积-cross-join" aria-hidden="true">#</a> 笛卡尔积 cross join</h3><p>笛卡尔积产生的数量是表A数据的个数乘以表B数据的个数。即表A的每一条数据对应表B的所有数据。</p><p><b style="color:#3e547d;"><strong>实现代码</strong></b></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 
	<span class="token operator">*</span>
<span class="token keyword">from</span>
	table_a 
<span class="token keyword">cross</span> <span class="token keyword">join</span>
	table_b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b style="color:#3e547d;"><strong>查询结果</strong></b></p><p>左边是查询结果(<strong>没有显示完全</strong>)，右边是表A和表B的原始数据。</p><figure><img src="`+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="内连接-inner-join" tabindex="-1"><a class="header-anchor" href="#内连接-inner-join" aria-hidden="true">#</a> 内连接 inner join</h3><p>两表都有的才显示出来，就是两个集合的交集。</p><p><b style="color:#3e547d;"><strong>实现代码</strong></b></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 
	<span class="token operator">*</span>
<span class="token keyword">from</span>
	table_a <span class="token keyword">as</span> A 
<span class="token keyword">inner</span> <span class="token keyword">join</span> 
	table_b <span class="token keyword">as</span> B 
<span class="token keyword">on</span> 
	A<span class="token punctuation">.</span>id <span class="token operator">=</span> B<span class="token punctuation">.</span>id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b style="color:#3e547d;"><strong>查询结果</strong></b></p><p>左边是查询结果，右边是表A和表B的原始数据。</p><figure><img src="`+v+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="左连接-left-join" tabindex="-1"><a class="header-anchor" href="#左连接-left-join" aria-hidden="true">#</a> 左连接 left join</h3><p>左连接是左边表的所有数据都显示出来，右边的表数据只显示共同有的那部分，没有对应的部分只能补空显示，所谓的左边表其实就是指放在left join左边的表。</p><p><b style="color:#3e547d;"><strong>实现代码</strong></b></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
	<span class="token operator">*</span>
<span class="token keyword">from</span> 
	table_a <span class="token keyword">as</span> A 
<span class="token keyword">left</span> <span class="token keyword">join</span> 
	table_b <span class="token keyword">as</span> B 
<span class="token keyword">on</span> 
	A<span class="token punctuation">.</span>id <span class="token operator">=</span> B<span class="token punctuation">.</span>id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b style="color:#3e547d;"><strong>查询结果</strong></b></p><p>左边是查询结果，右边是表A和表B的原始数据。</p><figure><img src="`+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="右连接-right-join" tabindex="-1"><a class="header-anchor" href="#右连接-right-join" aria-hidden="true">#</a> 右连接 right join</h3><p>右连接是右边表的所有数据都显示出来，左边的表数据只显示共同有的那部分，没有对应的部分只能补空显示，所谓的右边表其实就是指放在left join右边的表。</p><p><b style="color:#3e547d;"><strong>实现代码</strong></b></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 
	<span class="token operator">*</span>
<span class="token keyword">from</span> 
	table_a <span class="token keyword">as</span> A 
<span class="token keyword">right</span> <span class="token keyword">join</span> 
	table_b <span class="token keyword">as</span> B 
<span class="token keyword">on</span> 
	A<span class="token punctuation">.</span>id <span class="token operator">=</span> B<span class="token punctuation">.</span>id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b style="color:#3e547d;"><strong>查询结果</strong></b></p><p>左边是查询结果，右边是表A和表B的原始数据。</p><figure><img src="`+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="外-全-连接" tabindex="-1"><a class="header-anchor" href="#外-全-连接" aria-hidden="true">#</a> 外(全)连接</h3><p>查询出左表和右表所有数据，但是去除两表的重复数据。</p><p><b style="color:#3e547d;"><strong>实现代码</strong></b></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># Mysql不支持全连接(outer join)，只能用以下代码实现效果，含义是左连接+右连接+去重=全连接：</span>
<span class="token comment"># union会去除两个查询中重复的行</span>
<span class="token keyword">select</span>
	<span class="token operator">*</span>
<span class="token keyword">from</span> 
	table_a <span class="token keyword">as</span> A 
<span class="token keyword">left</span> <span class="token keyword">join</span> 
	table_b <span class="token keyword">as</span> B 
<span class="token keyword">on</span> 
	A<span class="token punctuation">.</span>id <span class="token operator">=</span> B<span class="token punctuation">.</span>id
<span class="token keyword">union</span> 
<span class="token keyword">select</span> 
	<span class="token operator">*</span> 
<span class="token keyword">from</span> 
	table_a <span class="token keyword">as</span> A 
<span class="token keyword">right</span> <span class="token keyword">join</span> 
	table_b <span class="token keyword">as</span> B 
<span class="token keyword">on</span> 
	A<span class="token punctuation">.</span>id <span class="token operator">=</span> B<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b style="color:#3e547d;"><strong>查询结果</strong></b></p><p>左边是查询结果，右边是表A和表B的原始数据。</p><figure><img src="`+y+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="左连接不包含内连接" tabindex="-1"><a class="header-anchor" href="#左连接不包含内连接" aria-hidden="true">#</a> 左连接不包含内连接</h3><p>只查询左边表有的数据，共同有的也查不出来。</p><p><b style="color:#3e547d;"><strong>实现代码</strong></b></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 
	<span class="token operator">*</span>
<span class="token keyword">from</span> 
	table_a <span class="token keyword">as</span> A 
<span class="token keyword">left</span> <span class="token keyword">join</span> 
	table_b <span class="token keyword">as</span> B 
<span class="token keyword">on</span> 
	A<span class="token punctuation">.</span>id <span class="token operator">=</span> B<span class="token punctuation">.</span>id
<span class="token keyword">where</span> 
	B<span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token boolean">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b style="color:#3e547d;"><strong>查询结果</strong></b></p><p>左边是查询结果，右边是表A和表B的原始数据。</p><figure><img src="`+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="右连接不包含内连接" tabindex="-1"><a class="header-anchor" href="#右连接不包含内连接" aria-hidden="true">#</a> 右连接不包含内连接</h3><p>只查询右边表有的数据，共同有的也查不出来。</p><p><b style="color:#3e547d;"><strong>实现代码</strong></b></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 
	<span class="token operator">*</span>
<span class="token keyword">from</span> 
	table_a <span class="token keyword">as</span> A 
<span class="token keyword">right</span> <span class="token keyword">join</span> 
	table_b <span class="token keyword">as</span> B 
<span class="token keyword">on</span> 
	A<span class="token punctuation">.</span>id <span class="token operator">=</span> B<span class="token punctuation">.</span>id
<span class="token keyword">where</span> 
	A<span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token boolean">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b style="color:#3e547d;"><strong>查询结果</strong></b></p><p>左边是查询结果，右边是表A和表B的原始数据。</p><figure><img src="`+w+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="外连接不包含内连接" tabindex="-1"><a class="header-anchor" href="#外连接不包含内连接" aria-hidden="true">#</a> 外连接不包含内连接</h3><p>左右表各自拥有的那部分数据。</p><p><b style="color:#3e547d;"><strong>实现代码</strong></b></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- union all 会将两个查询结果合并在一起</span>
<span class="token keyword">select</span>
	<span class="token operator">*</span>
<span class="token keyword">from</span>
	table_a <span class="token keyword">as</span> A 
<span class="token keyword">left</span> <span class="token keyword">join</span>
	table_b <span class="token keyword">as</span> B 
<span class="token keyword">on</span>
	A<span class="token punctuation">.</span>id <span class="token operator">=</span> B<span class="token punctuation">.</span>id
<span class="token keyword">where</span>
	B<span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token boolean">null</span>
<span class="token keyword">union</span> <span class="token keyword">all</span>
<span class="token keyword">select</span>
	<span class="token operator">*</span>
<span class="token keyword">from</span>
	table_a <span class="token keyword">as</span> A 
<span class="token keyword">right</span> <span class="token keyword">join</span> 
	table_b <span class="token keyword">as</span> B 
<span class="token keyword">on</span>
	A<span class="token punctuation">.</span>id <span class="token operator">=</span> B<span class="token punctuation">.</span>id
<span class="token keyword">where</span>
	A<span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token boolean">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b style="color:#3e547d;"><strong>查询结果</strong></b></p><p>左边是查询结果，右边是表A和表B的原始数据。</p><figure><img src="`+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="第06章-解决方案" tabindex="-1"><a class="header-anchor" href="#第06章-解决方案" aria-hidden="true">#</a> 第06章 解决方案</h2><h3 id="匹配2020年2月份的数据" tabindex="-1"><a class="header-anchor" href="#匹配2020年2月份的数据" aria-hidden="true">#</a> 匹配2020年2月份的数据</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 方案一</span>
<span class="token keyword">where</span> order_date <span class="token operator">between</span> <span class="token string">&#39;2020-02-01&#39;</span> <span class="token operator">and</span> <span class="token string">&#39;2020-02-29&#39;</span>

<span class="token comment">-- 方案二</span>
<span class="token keyword">where</span> order_date <span class="token operator">like</span> <span class="token string">&#39;2020-02-%&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第07章-经典例题" tabindex="-1"><a class="header-anchor" href="#第07章-经典例题" aria-hidden="true">#</a> 第07章 经典例题</h2><h3 id="例题001-经典行转列" tabindex="-1"><a class="header-anchor" href="#例题001-经典行转列" aria-hidden="true">#</a> 例题001-经典行转列</h3>`,87),S={href:"https://leetcode.cn/problems/reformat-department-table/description/",target:"_blank",rel:"noopener noreferrer"},B=s('<p><b style="color:#3e547d;"><strong>题目</strong></b></p><figure><img src="'+f+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><b style="color:#3e547d;"><strong>题解</strong></b></p><p><b style="color:#6E8B74;"><strong>group by的作用：</strong></b>group by id 会使Department表按照id分组，生成一张虚拟表（假想中的表）如下：</p><table><thead><tr><th style="text-align:center;">id</th><th style="text-align:center;">revenue</th><th style="text-align:center;">month</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">8000<br>7000<br>6000<br></td><td style="text-align:center;">Jan<br>Feb<br>Mar<br></td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">9000</td><td style="text-align:center;">Jan</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">10000</td><td style="text-align:center;">Feb</td></tr></tbody></table><p>在虚拟表中，所有id=1的revenue或者month数据都写在了同一个单元格中，如8000、7000、6000都是写在同一单元格内的。真正的表是不能这样写的，所以这种写法只存在于虚拟表中，帮助我们理解。</p><p><b style="color:#6E8B74;"><strong>case when的原理：</strong></b>当一个单元格中有多个数据时，case when只会提取当中的<strong>第一个数据</strong>。以CASE WHEN month=&#39;Feb&#39; THEN revenue END 为例，当id=1时，它只会提取month对应单元格里的第一个数据，即Jan，它不等于Feb，所以找不到Feb对应的revenue，所以返回NULL。</p><p><b style="color:#6E8B74;"><strong>那该如何解决单元格内含多个数据的情况：</strong></b>答案就是使用聚合函数，聚合函数就用来输入多个数据，输出一个数据的。如SUM()或MAX()，而每个聚合函数的输入就是每一个多数据的单元格。简而言之就是遍历。</p><p><b style="color:#3e547d;"><strong>答案</strong></b></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 
	id<span class="token punctuation">,</span>
    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token keyword">month</span> <span class="token operator">=</span> <span class="token string">&#39;Jan&#39;</span> <span class="token keyword">then</span> revenue <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Jan_Revenue<span class="token punctuation">,</span>
    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token keyword">month</span> <span class="token operator">=</span> <span class="token string">&#39;Feb&#39;</span> <span class="token keyword">then</span> revenue <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Feb_Revenue<span class="token punctuation">,</span>
    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token keyword">month</span> <span class="token operator">=</span> <span class="token string">&#39;Mar&#39;</span> <span class="token keyword">then</span> revenue <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Mar_Revenue<span class="token punctuation">,</span>
    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token keyword">month</span> <span class="token operator">=</span> <span class="token string">&#39;Apr&#39;</span> <span class="token keyword">then</span> revenue <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Apr_Revenue<span class="token punctuation">,</span>
    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token keyword">month</span> <span class="token operator">=</span> <span class="token string">&#39;May&#39;</span> <span class="token keyword">then</span> revenue <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> May_Revenue<span class="token punctuation">,</span>
    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token keyword">month</span> <span class="token operator">=</span> <span class="token string">&#39;Jun&#39;</span> <span class="token keyword">then</span> revenue <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Jun_Revenue<span class="token punctuation">,</span>
    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token keyword">month</span> <span class="token operator">=</span> <span class="token string">&#39;Jul&#39;</span> <span class="token keyword">then</span> revenue <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Jul_Revenue<span class="token punctuation">,</span>
    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token keyword">month</span> <span class="token operator">=</span> <span class="token string">&#39;Aug&#39;</span> <span class="token keyword">then</span> revenue <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Aug_Revenue<span class="token punctuation">,</span>
    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token keyword">month</span> <span class="token operator">=</span> <span class="token string">&#39;Sep&#39;</span> <span class="token keyword">then</span> revenue <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Sep_Revenue<span class="token punctuation">,</span>
    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token keyword">month</span> <span class="token operator">=</span> <span class="token string">&#39;Oct&#39;</span> <span class="token keyword">then</span> revenue <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Oct_Revenue<span class="token punctuation">,</span>
    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token keyword">month</span> <span class="token operator">=</span> <span class="token string">&#39;Nov&#39;</span> <span class="token keyword">then</span> revenue <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Nov_Revenue<span class="token punctuation">,</span>
    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token keyword">month</span> <span class="token operator">=</span> <span class="token string">&#39;Dec&#39;</span> <span class="token keyword">then</span> revenue <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Dec_Revenue
<span class="token keyword">from</span> 
	Department
<span class="token keyword">group</span> <span class="token keyword">by</span> 
	id
<span class="token keyword">order</span> <span class="token keyword">by</span> 
	id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function N(E,j){const a=l("ExternalLinkIcon");return c(),i("div",null,[_,n("p",null,[n("a",x,[e("例题链接: 197-上升的温度 (LeetCode)"),t(a)])]),A,n("p",null,[n("a",S,[e("原题链接：1179- 重新格式化部门表(LeetCode)"),t(a)])]),B])}const z=o(q,[["render",N],["__file","SQL语句.html.vue"]]);export{z as default};
